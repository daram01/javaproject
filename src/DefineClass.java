
public class DefineClass {
	
	// 객체지향적 프로그램 : OOP (Object Oriented Programing)
	// 1. 상속
	// 2. 다형성
	// 3. 캡슐화(정보 은닉)
	// 위의 내용들이 클래스 안에서 구현되어야 한다.
	
//	● 속성(멤버변수) 
//	초기화의 우선순위 : 자동초기화 > 명시적초기화 > 초기화 블럭 > 생성자
//	1. 인스턴스 변수(멤버변수 : 자동초기화)
//	객체 생성을 통해 사용 가능
//	생성자에 의해 초기화 된다
//	2. 클래스(static) 변수
//	객체를 생성하지 않아도 사용 가능
//	필요에 따라 직접 초기화 한다.
//	객체에서 공유한다.	
//	
//	● 초기화 블럭
//	1. 인스턴스 초기화 블럭
//	인스턴스 변수를 초기화 한다.
//	2. 클래스(static) 초기화 블럭
//	클래스 변수를 초기화 한다.
//	
//	● 생성자
//	1. 멤버 변수 중에서 인스턴스 변수를 초기화 한다.
//	2. 클래스 이름과 동일하게 작성한다.
//	3. 오버로딩 가능(단, 매개변수를 정의해야 한다.)
//	4. 객채 생성시 딱 한번 호출(사용) 되어 진다.
//	5. 생성자간 호출 가능하다. this()
//	6. 모든 클래스는 생성자를 포함하고 있다. (생략 가능) 
//	7. 멤버 변수와 매개 변수를 구분하기 위해 this 속성을 사용한다.
//	
//	● 기능(메소드)
//	1. 인스턴스 메소드
//	객채를 생성해야 사용 가능하다.
//	인스턴스와 클래스 멤버를 모두 사용할 수 있다.
//	2. 클래스(static) 메소드
//	객채를 생성하지 않아도 사용 가능하다.
//	클래스 멤버만 사용 가능하다.
//	공통 - 오버로딩이 가능하다. (oop의 다형성을 구현)
	
	int iv; // 인스턴스 변수
	static int cv; // 클래스 변수
	
	{
		iv = 10; // 인스턴스 블럭
	}
	
	{
		cv = 100; // 클래스 블럭
	}
	
	DefineClass(){ // 기본생성자
		
	}
	
	DefineClass(int iv){ // 생성자의 오버로딩
		this.iv = 30;
	}
	
	void instanceMethod() { // 인스턴스 메소드
		iv = 50;
		cv = 60;
	}
	
	void instanceMethod(int x) { // 메소드 오버로딩
		iv = 100;
		cv = 200;
	}
	
	static void staticMethod() { // 클래스 메소드
		cv = 70;
	}

}
